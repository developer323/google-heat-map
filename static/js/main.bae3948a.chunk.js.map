{"version":3,"sources":["logo.svg","components/HeatMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HeatMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","heatmapVisible","heatmapPoints","lat","lng","_ref","x","y","event","setState","toConsumableArray","concat","undefined","_googleMap","point","google","maps","LatLng","heatmap","data","push","_this2","setMap","map_","_this3","heatMapData","positions","options","radius","opacity","console","log","react_default","a","createElement","style","height","width","lib_default","ref","el","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","heatmapLibrary","onClick","onMapClick","bind","className","toggleHeatMap","Component","defaultProps","App","src_components_HeatMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yOCMlCC,qBASJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,gBAAgB,EAClBC,cAAe,CACb,CAACC,IAAK,MAAOC,IAAK,OACnB,CAACD,IAAK,MAAOC,IAAK,SANFX,6EAWiBY,EAAxBC,EAAwBD,EAArBE,EAAqB,IAAlBJ,EAAkBE,EAAlBF,IAAKC,EAAaC,EAAbD,IAAaC,EAARG,MAC1B,GAAKZ,KAAKI,MAAMC,iBAIjBL,KAAKa,SAAS,CACbP,cAAcR,OAAAgB,EAAA,EAAAhB,CAAME,KAAKI,MAAME,eAAlBS,OAAA,CAAiC,CAACR,MAAKC,gBAE5BQ,IAApBhB,KAAKiB,YAA0B,CACjC,IAAMC,EAAQ,IAAIC,OAAOC,KAAKC,OAAOd,EAAKC,GAC1CR,KAAKiB,WAAWK,QAAQC,KAAKC,KAAKN,4CAItB,IAAAO,EAAAzB,KACdA,KAAKa,SAAS,CACZR,gBAAiBL,KAAKI,MAAMC,gBAC3B,gBACuBW,IAApBS,EAAKR,YACPQ,EAAKR,WAAWK,QAAQI,OAAOD,EAAKrB,MAAMC,eAAiBoB,EAAKR,WAAWU,KAAO,yCAM/E,IAAAC,EAAA5B,KAGF6B,EAAc,CACnBC,UAAW9B,KAAKI,MAAME,cACxByB,QAAS,CACRC,OAAQ,GACRC,QAAS,KAMR,OAFDC,QAAQC,IAAInC,KAAKI,OAGdgC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACpCL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,IAAK,SAACC,GAAD,OAAQhB,EAAKX,WAAa2B,GAC/BC,iBAfQ,CAACC,IAAK,2CAgBdC,cAAe/C,KAAKJ,MAAMoD,OAC1BC,YAAajD,KAAKJ,MAAMsD,KACxBC,gBAAgB,EAChB7B,QAASO,EACTuB,QAASpD,KAAKqD,WAAWC,KAAKtD,QAGhCoC,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,eAAeH,QAASpD,KAAKwD,cAAcF,KAAKtD,OAAlE,0BAtEcyD,cAAhB9D,EACG+D,aAAe,CACpBV,OAAQ,CACNzC,IAAK,MACLC,IAAK,OAEP0C,KAAM,IAsEKvD,QClEAgE,mLARX,OACEvB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAACsB,EAAD,cAJUH,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bae3948a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"," /* global google */\nimport React, { Component } from 'react'\nimport GoogleMapReact from 'google-map-react'\n\nimport './HeatMap.css'\n\nclass HeatMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  }\n\n  constructor(props) {\n  \tsuper(props)\n  \tthis.state = {\n      heatmapVisible: true,\n  \t\theatmapPoints: [\n\t\t  \t\t{lat: 59.95, lng: 30.33},\n\t\t\t\t\t{lat: 59.96, lng: 30.32}\n\t\t\t\t]\n  \t}\n  }\n\n  onMapClick({x, y, lat, lng, event}) {\n    if (!this.state.heatmapVisible) {\n      return\n    }\n    \n  \tthis.setState({\n  \t\theatmapPoints: [ ...this.state.heatmapPoints, {lat, lng}]\n  \t})\n    if (this._googleMap !== undefined) {      \n      const point = new google.maps.LatLng(lat, lng)\n      this._googleMap.heatmap.data.push(point)\n    }\n  }\n\n  toggleHeatMap() {    \n    this.setState({\n      heatmapVisible: !this.state.heatmapVisible\n    }, () => {\n      if (this._googleMap !== undefined) {\n        this._googleMap.heatmap.setMap(this.state.heatmapVisible ? this._googleMap.map_ : null)\n      }      \n    })\n\n  }\n\n  render() {\n\n  \tconst apiKey = {key: 'AIzaSyDmxLOY-mw_pCg8z7pUlIlZ1GLxHQRhU9c'}\n  \tconst heatMapData = {\n  \t\tpositions: this.state.heatmapPoints,\n\t\toptions: {\n\t\t\tradius: 20,\n\t\t\topacity: 0.6\n\t\t}\n  \t}\n\n  \tconsole.log(this.state)\n\n    return (\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          ref={(el) => this._googleMap = el}\n          bootstrapURLKeys={apiKey}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          heatmapLibrary={true}\n          heatmap={heatMapData}\n          onClick={this.onMapClick.bind(this)}\n        >\n        </GoogleMapReact>\n        <button className=\"toggleButton\" onClick={this.toggleHeatMap.bind(this)}>Toggle heatmap</button>\n      </div>\n    )\n  }\n}\n\nexport default HeatMap","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport HeatMap from './components/HeatMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HeatMap/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}